#include <GL/glut.h>
#include <cmath> // For pow() function

void draw(int x[], int y[]) {
    glClear(GL_COLOR_BUFFER_BIT); // Clear the display

    // Draw control points as small circles
    glColor3f(1.0, 1.0, 1.0); // Set color to white
    glPointSize(5.0);
    glBegin(GL_POINTS);
    for (int i = 0; i < 4; i++) {
        glVertex2i(x[i], y[i]);
    }
    glEnd();

    // Draw Bezier curve
    glColor3f(1.0, 1.0, 0.0); // Set color to yellow
    glBegin(GL_POINTS);
    for (float t = 0; t <= 1; t += 0.001) {
        float xt = pow(1 - t, 3) * x[0] + 3 * t * pow(1 - t, 2) * x[1] +
                   3 * pow(t, 2) * (1 - t) * x[2] + pow(t, 3) * x[3];
        float yt = pow(1 - t, 3) * y[0] + 3 * t * pow(1 - t, 2) * y[1] +
                   3 * pow(t, 2) * (1 - t) * y[2] + pow(t, 3) * y[3];
        glVertex2i((int)xt, (int)yt);
    }
    glEnd();

    glFlush(); // Force execution of OpenGL commands
}

void display() {
    int x[] = {100, 200, 300, 400};
    int y[] = {100, 300, 400, 200};
    draw(x, y);
}

void init() {
    glClearColor(0.0, 0.0, 0.0, 1.0); // Set background color to black
    glColor3f(1.0, 1.0, 1.0);         // Set default color to white
    glPointSize(2.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, 500.0, 0.0, 500.0); // Define coordinate system
}

int main(int argc, char **argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Bezier Curve using OpenGL");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}

